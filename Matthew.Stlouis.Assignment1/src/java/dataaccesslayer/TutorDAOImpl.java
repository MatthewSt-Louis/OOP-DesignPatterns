/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dataaccesslayer;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import transferobjects.TutorDTO;

/**
 *
 * @author Matthew
 */
public class TutorDAOImpl implements TutorDAO {
    
        @Override
	public List<TutorDTO> getAllTutors(Integer courseCode) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
                ResultSet rs2 = null;
		ArrayList<TutorDTO> tutors = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"SELECT TutorID FROM tutorcourse WHERE CourseCode EQUALS %d", courseCode);
			rs = pstmt.executeQuery();
                      
			tutors = new ArrayList<>();//ArrayList type is inferred from previous declaration of recipients
			while(rs.next()){
				TutorDTO tutor = new TutorDTO();
                                tutor.setTutorID(rs.getInt("TutorID"));
                                tutor.setCourseCode(courseCode.toString());
                                pstmt = con.prepareStatement(
                                        "SELECT FirstName, LastName FROM tutor WHERE TutorID='%s'", tutor.getTutorID());
                                rs2 = pstmt.executeQuery();
                                        while(rs2.next()){
                                            tutor.setFirstName(rs.getString("FirstName"));
                                            tutor.setLastName(rs.getString("LastName"));
                                        }                               
				tutors.add(tutor);                               
			}
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(rs != null){ rs.close(); } }
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
		return tutors;
	}
        
        @Override
        public void addTutor(TutorDTO t){
            Connection con = null;
            PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			// do not insert awardID, it is generated by Database
			pstmt = con.prepareStatement(
					"INSERT INTO tutorcourse (TutorID, CourseCode) " +
			        "VALUES(?, ?)");
			pstmt.setString(1, t.getTutorID().toString());
			pstmt.setString(2, t.getCourseCode());
			pstmt.executeUpdate();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
        }
        
        @Override
        public boolean checkGrade(TutorDTO t){
                Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"SELECT GradeCode FROM grade WHERE courseCode = ?");
                        pstmt.setString(1, t.getCourseCode());
			rs = pstmt.executeQuery();
                        while(rs.next()){
                            t.setStatus(rs.getString("GradeCode"));
                        }      
                }catch(SQLException e){
                    e.printStackTrace();
                }
                return t.getStatus().contains("A");
        }
    
}
